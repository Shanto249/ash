#!/bin/bash
# aishell - AI-enhanced shell wrapper
# Automatically processes any command containing the trigger word through n command

# Configuration
TRIGGER_WORD="avarice"
N_COMMAND="n"
HISTORY_FILE="$HOME/.aishell_history"
MAX_HISTORY=1000
DEBUG_MODE=false

# Colors for better UX
COLOR_PROMPT="\033[1;36m"  # Cyan
COLOR_INFO="\033[1;33m"    # Yellow
COLOR_SUCCESS="\033[1;32m" # Green
COLOR_RESET="\033[0m"

# Create history file if it doesn't exist
touch "$HISTORY_FILE" 2>/dev/null

# Debug logging
debug_log() {
    if [ "$DEBUG_MODE" = true ]; then
        echo -e "\033[90m[DEBUG] $1\033[0m" >&2
    fi
}

# Add command to history
add_to_history() {
    local cmd="$1"
    echo "$cmd" >> "$HISTORY_FILE"
    
    # Keep history at reasonable size
    if [ "$(wc -l < "$HISTORY_FILE")" -gt "$MAX_HISTORY" ]; then
        tail -n "$MAX_HISTORY" "$HISTORY_FILE" > "${HISTORY_FILE}.tmp"
        mv "${HISTORY_FILE}.tmp" "$HISTORY_FILE"
    fi
}

# Load custom environment
if [ -f "$HOME/.aishellrc" ]; then
    debug_log "Loading custom environment from ~/.aishellrc"
    source "$HOME/.aishellrc"
fi

# Process a command
process_command() {
    local input="$1"
    local exit_status=0
    
    # Skip empty commands
    if [ -z "$input" ]; then
        return 0
    fi
    
    # Add to history
    add_to_history "$input"
    
    # Check for special commands
    case "$input" in
        exit|quit)
            echo -e "${COLOR_INFO}Exiting AI shell${COLOR_RESET}"
            exit 0
            ;;
        '!history')
            cat "$HISTORY_FILE" | nl
            return 0
            ;;
        !*)
            # Handle history expansion
            local history_num="${input#!}"
            if [[ "$history_num" =~ ^[0-9]+$ ]]; then
                local history_cmd=$(sed -n "${history_num}p" "$HISTORY_FILE")
                if [ -n "$history_cmd" ]; then
                    echo -e "${COLOR_INFO}Running: $history_cmd${COLOR_RESET}"
                    process_command "$history_cmd"
                    return $?
                else
                    echo -e "\033[31mHistory command not found: $history_num\033[0m"
                    return 1
                fi
            fi
            ;;
    esac
    
    # Check if input contains trigger word but isn't a direct n/avarice command
    if [[ "$input" == *"$TRIGGER_WORD"* ]] && 
       [[ "$input" != "$TRIGGER_WORD "* ]] && 
       [[ "$input" != "$N_COMMAND "* ]]; then
        echo -e "${COLOR_INFO}Intercepted: $input${COLOR_RESET}"
        echo -e "${COLOR_INFO}Processing through AI...${COLOR_RESET}"
        
        # Run through n command
        $N_COMMAND "$input"
        exit_status=$?
        
        # Report result
        if [ $exit_status -eq 0 ]; then
            debug_log "AI command completed successfully"
        else
            debug_log "AI command failed with status $exit_status"
        fi
    else
        # Execute normally
        debug_log "Executing directly: $input"
        eval "$input"
        exit_status=$?
    fi
    
    return $exit_status
}

# Display welcome message
echo -e "${COLOR_INFO}============================================${COLOR_RESET}"
echo -e "${COLOR_INFO}  AI-Enhanced Shell (aishell)${COLOR_RESET}"
echo -e "${COLOR_INFO}  Any command containing '${TRIGGER_WORD}' will be${COLOR_RESET}"
echo -e "${COLOR_INFO}  automatically processed through the AI.${COLOR_RESET}"
echo -e "${COLOR_INFO}============================================${COLOR_RESET}"
echo -e "${COLOR_INFO}  Type 'exit' to quit${COLOR_RESET}"
echo -e "${COLOR_INFO}  Use '!history' to view command history${COLOR_RESET}"
echo -e "${COLOR_INFO}  Use '!n' to repeat history command #n${COLOR_RESET}"
echo -e "${COLOR_INFO}============================================${COLOR_RESET}"
echo

# Main interaction loop
while true; do
    # Get current directory for prompt
    current_dir="$(pwd | sed "s|^$HOME|~|")"
    
    # Display prompt
    echo -ne "${COLOR_PROMPT}aishell:$current_dir${COLOR_RESET}$ "
    
    # Read input (support for basic line editing and history)
    read -e input
    
    # Process the input
    process_command "$input"
done 